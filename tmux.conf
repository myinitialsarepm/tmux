#change to C-a like screen and allow double tap for last window
set-option -g prefix 'C-a'
bind-key 'C-a' last-window

#start numbering at 1
set-option -g base-index 1
set-option -g pane-base-index 1
#auto renumber
set-option -g renumber-windows on

#monitor activity
set-window-option -g monitor-activity on

#vi(m) keybindings
set-window-option -g mode-keys vi

#vi(m) pane selection
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

#pane resizing
bind-key -T resize h resize-pane -L \; switch-client -T resize
bind-key -T resize j resize-pane -D \; switch-client -T resize
bind-key -T resize k resize-pane -U \; switch-client -T resize
bind-key -T resize l resize-pane -R \; switch-client -T resize
bind-key R switch-client -T resize

bind-key U command-prompt -p "new width:" "resize-pane -x %%"
bind-key I command-prompt -p "new height:" "resize-pane -y %%"

bind-key | split-window -h -c '#{pane_current_path}'
bind-key _ split-window -v -c '#{pane_current_path}'

bind-key C-s set-window synchronize-panes

# Send current date in (almost) rfcc-3339 format
bind-key -T C-d-table s run-shell "tmux send-keys $(date --rfc-3339=seconds | sed -e 's/ /_/g' -e 's/:/./g' -e 's/+.*$//g')"
bind-key -T C-d-table S run-shell "tmux send-keys \"$(date --rfc-3339=seconds)\""
bind-key -T C-d-table d run-shell "tmux send-keys \"$(date --rfc-3339=date)\""
bind-key D run-shell "tmux send-keys \"$(date --rfc-3339=date)\""
bind-key C-d switch-client -T C-d-table

# Send a random string
bind-key -T C-r-table n run-shell "tmux send-keys $(curl 'https://www.random.org/strings/?num=1&len=20&upperalpha=on&loweralpha=on&digits=on&format=plain&rnd=new' | tee ~/.last_random_string)" \; display-message 'Random string sent.'
# Send the last random string
bind-key -T C-r-table l run-shell "tmux send-keys $(cat ~/.last_random_string)" \; display-message 'Last random string sent.'
bind-key C-r switch-client -T C-r-table

bind-key -T C-c-table v run-shell "tmux send-keys \"cat << ENDVIMRC > ~/.vimrc\" Enter \"$(cat ~/.remote_vimrc)\" Enter ENDVIMRC Enter"
bind-key -T C-c-table b run-shell "tmux send-keys \"cat << ENDBASHRC > ~/.bashrc\" Enter \"$(cat ~/.remote_bashrc)\" Enter ENDBASHRC Enter \"source ~/.bashrc\" Enter"
# Become root
bind-key -T C-c-table s send-keys "sudo su -" Enter
bind-key -T C-c-table e send-keys " exit" Enter
bind-key -T C-c-table C send-keys "sudo /usr/sbin/apachectl configtest" Enter
bind-key -T C-c-table g send-keys "sudo /usr/sbin/apachectl graceful" Enter
bind-key -T C-c-table S send-keys "sudo /usr/sbin/apachectl -S 2>&1 | less" Enter
bind-key -T C-c-table c run-shell "tmux send-keys \"sudo crontab -l | tee ~/cron.$(date --rfc-3339=seconds | sed -e 's/ /_/g' -e 's/:/./g' -e 's/+.*$//g') | vim -\" Enter"
bind-key -T C-c-table t source "$HOME/.tmux.conf"
bind-key C-c switch-client -T C-c-table

bind-key -T C-t-table x send-keys " | xargs "
bind-key -T C-t-table t send-keys "tmux-cssh "
bind-key -T C-t-table p send-keys ".production.eckoh.com"
bind-key -T C-t-table a send-keys ".da.eckoh.com"
bind-key -T C-t-table c send-keys ".dc.eckoh.com"
bind-key -T C-t-table o send-keys ".o2.eckoh.com"
bind-key -T C-t-table u send-keys ".uat.eckoh.com"
bind-key -T C-t-table d send-keys ".dev.eckoh.com"
bind-key -T C-t-table n send-keys ".net.eckoh.com"
bind-key -T C-t-table e send-keys ".eckoh.com"
bind-key C-t switch-client -T C-t-table

bind-key -T C-m-table d command-prompt -p "database name:" "send-keys \"mysqldump --triggers --routines -urootu -p \" %1 \" > \" %1 \".\" \; run-shell \"tmux send-keys \\\"$(date --rfc-3339=seconds | sed -e 's/ /_/g' -e 's/:/./g' -e 's/+.*$//g')\\\" Enter \""
bind-key -T C-m-table m send-keys "mysql -urootu -p "
bind-key -T C-m-table M send-keys "mysql -h " \; bind-key -T root Space run-shell "tmux send-keys \" -urootu -p\" Enter; tmux unbind-key -T root Space"
bind-key C-m switch-client -T C-m-table

# Exit (space to avoid recording in history)
bind-key e send-keys " exit" Enter

#pipe pane output to file
bind-key -T C-p-table m command-prompt -p "target:" "move-pane -t %%"
bind-key -T C-p-table b command-prompt -p "target:" "break-pane -t %%"
bind-key -T C-p-table B break-pane
bind-key -T C-p-table s command-prompt -p "target:" "swap-pane -t %%"
bind-key C-p switch-client -T C-p-table
#bind-key C-p pipe-pane -o 'cat >>~/.tmux-output/output.#I-#P'

#copy buffer to clipboard
bind-key C-y run-shell 'tmux show-buffer | xclip -i -selection clipboard'

#start powerline
if-shell 'test $(uname -s) = "Darwin"' 'source "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/powerline/bindings/tmux/powerline.conf"'
if-shell 'test $(uname -s) = "Linux"' 'source "/usr/share/tmux/powerline.conf"'

#start microbe
run-shell "~/.tmux/microbe/microbe.sh"
